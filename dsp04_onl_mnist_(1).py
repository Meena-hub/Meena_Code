# -*- coding: utf-8 -*-
"""DSP04_ONL_MNIST (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10qx-O8YXMUA4-Kz-RFQjjHC3mtuU0aDw
"""

!unzip '/content/train.csv (1).zip'
!unzip '/content/test.csv.zip'

"""Import the requisite Libraries required"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

"""Load the Data"""

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train.head()

test.head()

train.dtypes

train.info()

import matplotlib.pyplot as plt

features = ["pixel{}".format(pixel_num) for pixel_num in range(0, 784)]
row_to_examine = 16
image_data = np.reshape(train[features][row_to_examine:row_to_examine+1].to_numpy(), (28, 28))
_ = plt.imshow(image_data, cmap="gray")

X = train.drop('label', axis = 1)
Y = train['label']

print(X.shape)
print(Y.shape)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state=123)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""Decision Tree"""

dtree = DecisionTreeClassifier()
dtree.fit(x_train, y_train)
preds_dtree = dtree.predict(x_test)
acc_dtree = accuracy_score(y_test, preds_dtree)
cm_dtree = confusion_matrix(y_test, preds_dtree)
clrep_dtree = classification_report(y_test, preds_dtree)

print('Accuracy of the model is:', acc_dtree)
print(cm_dtree)
print(clrep_dtree)

"""Random Forest Tree"""

rf = RandomForestClassifier()
rf.fit(x_train, y_train)
preds_rf = rf.predict(x_test)
acc_rf = accuracy_score(y_test, preds_rf)
cm_rf = confusion_matrix(y_test, preds_rf)
clrep_rf = classification_report(y_test, preds_rf)

print('Accuracy of Random Forest is: ', acc_rf)
print(cm_rf)
print(clrep_rf)

"""Multi Layer Perceptron (Neural Network)"""

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(50,50,50), max_iter=400,random_state = 42, verbose = True)
mlp.fit(x_train, y_train)
preds_mlp = mlp.predict(x_test)
acc_mlp = accuracy_score(y_test, preds_mlp)
confusion_matrix_mlp = confusion_matrix(y_test, preds_mlp)
clrep_mlp = classification_report(y_test, preds_mlp)

mlp.coefs_

print('Accuracy score for MLP is: ', acc_mlp)
print(confusion_matrix_mlp)
print(clrep_mlp)

import pickle

pkl_filename = "mlp_model.pkl"
with open(pkl_filename, 'wb') as file:
    pickle.dump(mlp, file)

with open(pkl_filename, 'rb') as file:
    pickle_model = pickle.load(file)

Ypredict = pickle_model.predict(test)

Ypredict[150]

features = ["pixel{}".format(pixel_num) for pixel_num in range(0, 784)]
row_to_examine = 150
image_data = np.reshape(test[features][row_to_examine:row_to_examine+1].to_numpy(), (28, 28))
_ = plt.imshow(image_data, cmap="gray")