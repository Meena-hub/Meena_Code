# -*- coding: utf-8 -*-
"""BigMart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K6hG4EgkjXcUSaEfQhNtCiEzznJto9pk
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

os.chdir('/content/')
train = pd.read_csv('train_v9rqX0R.csv')
test = pd.read_csv('test_AbJTz2l.csv')

train.dtypes

test.dtypes

train.describe()
#train.describe(include='all')

train.isna().sum()

test.isna().sum()

train['Item_Fat_Content'].value_counts().plot(kind='bar')

train['Item_Type'].value_counts().plot(kind='bar')

train['Outlet_Establishment_Year'].value_counts().plot(kind='bar')

train['Outlet_Location_Type'].value_counts().plot(kind='bar')

train['Outlet_Size'].value_counts().plot(kind='bar')

train['Outlet_Type'].value_counts().plot(kind='bar')

train.isna().sum()

train.skew()

train.boxplot(column=['Item_Weight'])

train.boxplot(column=['Item_Visibility'])

train.boxplot(column=['Item_MRP'])

train.boxplot(column=['Item_Outlet_Sales'])

#Bi Variate Analysis
train.corr()

plt.matshow(train.corr())
plt.show()

x

"""Null Hypothesis: Outlet Size and Outlet Location Type are independent



Alternate Hypothesis: Outlet Size and Outlet Location Type are dependent




Alpha = 0.05
"""

_,p,_,_ = chi2_contingency(cont_table)
#stat,p,dof,expected = chi2_contingency(cont_table)
print(p)

if p <0.05:
  print('Accept Alternate Hypothesis with p value less than 0.05:', p)
else:
  print('We fail to reject the null hypothesis',p)

def cust_chisq_test(cont_table):
  _,p,_,_ = chi2_contingency(cont_table)
  if p <=0.05:
    print('Accept Alternate hypothesis since p value is less than alpha and the p value is ', p)
  else:
    print('We Fail to accept the null hypothesis and reject the alternate hypothesis and the p value is ', p)

cust_chisq_test(cont_table)

"""Null Hypothesis: Outlet_Location_Type and Outlet_Type are independent

Alternate Hypothesis: Outlet_Location_Type and Outlet_Type are dependent

Alpha = 0.05
"""

cont_table_2 = pd.crosstab(train['Outlet_Location_Type'], train['Outlet_Type'])

cust_chisq_test(cont_table_2)

#Inconsistency in Item Fat Content to be managed
train['Item_Fat_Content'].replace('LF', 'Low Fat',inplace=True)
train['Item_Fat_Content'].replace('low fat','Low Fat', inplace=True)
train['Item_Fat_Content'].replace('reg','Regular', inplace=True)
train['Item_Fat_Content'].value_counts().plot(kind='bar')

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
train['Item_Fat_Content'] = le.fit_transform(train['Item_Fat_Content'])
train['Item_Fat_Content'].value_counts()
train['Item_Type'] = le.fit_transform(train['Item_Type'])
train['Item_Type'].value_counts()
train['Outlet_Type'] = le.fit_transform(train['Outlet_Type'])
train['Outlet_Type'].value_counts()
train['Outlet_Location_Type'] = le.fit_transform(train['Outlet_Location_Type'])
train['Outlet_Location_Type'].value_counts()
train['Outlet_Size'] = le.fit_transform(train['Outlet_Size'])
train['Outlet_Size'].value_counts()

train['YOB'] = 2021 - train['Outlet_Establishment_Year']
train['YOB'].value_counts().plot(kind='bar')

Y = train['Item_Outlet_Sales']
X = train[['Item_Weight','Item_Fat_Content',
           'Item_Visibility','Item_Type',
           'Item_MRP','Outlet_Size','Outlet_Location_Type',
           'Outlet_Type','YOB']]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 123)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
lr = LinearRegression()
lr.fit(X_train, Y_train)
preds_lr = lr.predict(X_test)
preds_lr_train = lr.predict(X_train)
mse_train = mean_squared_error(Y_train, preds_lr_train)
rmse_train = np.sqrt(mse_train)
mse = mean_squared_error(Y_test, preds_lr)
rmse = np.sqrt(mse)
print('Train RMSE is:', rmse_train)
print('Test RMSE is:', rmse)

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(X_train, Y_train)
preds_rf_train = rf.predict(X_train) 
preds_rf_test = rf.predict(X_test)
mse_train_rf = mean_squared_error(Y_train,preds_rf_train)
mse_test_rf = mean_squared_error(Y_test, preds_rf_test)
rmse_train_rf = np.sqrt(mse_train_rf)
rmse_test_rf = np.sqrt(mse_test_rf)
print('RF Train RMSE is: ', rmse_train_rf)
print('RF Test RMSE is: ', rmse_test_rf)