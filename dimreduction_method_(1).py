# -*- coding: utf-8 -*-
"""DimReduction_Method (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zYIfdVe8IGSoRt1mBLEXwwveppzFHQPU

Load all the required libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

"""Import the train and the test data

"""

train = pd.read_csv('/content/fordTrain.csv')
test = pd.read_csv('/content/fordTest.csv')

train.head(10)

train.shape

train.dtypes

train.isna().sum()

train.describe()

train.skew()

train['IsAlert'].value_counts()

349785/604329

254544/604329

Y = train['IsAlert']
X = train.iloc[:,3:]

print(Y.shape)
print(X.shape)

X.corr()

plt.matshow(X.corr())
plt.show()

X.corr().to_csv('corr.csv')

X.isnull().sum()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X,Y, test_size = 0.2, random_state = 123)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""Logistic Regression"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(x_train, y_train)
pred_y_test_lr = lr.predict(x_test)
acc_lr = accuracy_score(y_test, pred_y_test_lr)
cm_lr = confusion_matrix(y_test, pred_y_test_lr)
classrep_lr = classification_report(y_test, pred_y_test_lr)
print('The Overall Accuracy of the Model is: ', acc_lr)
print(cm_lr)
print(classrep_lr)

"""Decision Tree Classifier"""

dtree = DecisionTreeClassifier()
dtree.fit(x_train, y_train)
preds_y_test_dtree = dtree.predict(x_test)
acc_dtree = accuracy_score(y_test, preds_y_test_dtree)
cm_dtree = confusion_matrix(y_test, preds_y_test_dtree)
classrep_dtree = classification_report(y_test, preds_y_test_dtree)
print("Accuracy of the decision tree  is: ", acc_dtree)
print(cm_dtree)
print(classrep_dtree)

"""Random Forest Classifier"""

rf = RandomForestClassifier(n_estimators=15)
rf.fit(x_train, y_train)
preds_y_test_rf = rf.predict(x_test)
acc_rf = accuracy_score(y_test, preds_y_test_rf)
cm_rf = confusion_matrix(y_test, preds_y_test_rf)
classrep_rf = classification_report(y_test, preds_y_test_rf)
print("Accuracy of the random forest is: ", acc_rf)
print(cm_rf)
print(classrep_rf)

from sklearn.decomposition import PCA

pca = PCA(n_components=15)
pca.fit(x_train)
x_train_trans = pca.fit_transform(x_train)
x_test_trans = pca.fit_transform(x_test)

print(x_train_trans.shape)
print(x_test_trans.shape)

pca.explained_variance_ratio_

"""Logistic Regression with Principal Components"""

lr_pca = LogisticRegression()
lr_pca.fit(x_train_trans, y_train)
preds_lr_pca = lr_pca.predict(x_test_trans)
acc_lr_pca = accuracy_score(y_test, preds_lr_pca)
cm_lr_pca = confusion_matrix(y_test, preds_lr_pca)
classrep_lr_pca = classification_report(y_test, preds_lr_pca)
print('The Accuracy of the model is: ', acc_lr_pca)
print(cm_lr_pca)
print(classrep_lr_pca)

"""Decision Tree with PCA"""

dtree_pca = DecisionTreeClassifier()
dtree_pca.fit(x_train_trans, y_train)
preds_dtree_pca = dtree_pca.predict(x_test_trans)
acc_dtree_pca = accuracy_score(y_test, preds_dtree_pca)
cm_dtree_pca = confusion_matrix(y_test, preds_dtree_pca)
classrep_dtree_pca = classification_report(y_test, preds_dtree_pca)
print("The accuracy of the Decision Tree with PCA is: ",acc_dtree_pca)
print(cm_dtree_pca)
print(classrep_dtree_pca)

"""Random Forest with PCA"""

rf_pca = RandomForestClassifier(n_estimators=200)
rf_pca.fit(x_train_trans, y_train)
preds_rf_pca = rf_pca.predict(x_test_trans)
acc_rf_pca = accuracy_score(y_test, preds_rf_pca)
cm_rf_pca = confusion_matrix(y_test, preds_rf_pca)
classrep_rf_pca = classification_report(y_test, preds_rf_pca)
print('Accuracy Score for Random Forest with PCA is: ', acc_rf_pca)
print(cm_rf_pca)
print(classrep_rf_pca)

pca_data = pd.DataFrame(x_train_trans)

pca_data.skew()

pca_data.corr().to_csv('pca_corr.csv')

"""Working with the Test Dataset. Application of Random Forest without PCA"""

test.shape

test.head()

test_sub = test.iloc[:,3:]

test_sub.head()

test_sub.isna().sum()

test['Preds_IsAlert'] = rf.predict(test_sub)

test.to_csv('finalpreds.csv')

solution = pd.read_csv('Solution.csv')

confusion_matrix_final = confusion_matrix(solution['Prediction'],test['Preds_IsAlert'])

print(confusion_matrix_final)

((16629+83071)/120840)*100